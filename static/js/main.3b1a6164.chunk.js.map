{"version":3,"sources":["Components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["calcButtons","value","id","Calculator","_this","Object","C_Users_mattl_Desktop_Code_react_calculator_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","C_Users_mattl_Desktop_Code_react_calculator_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","C_Users_mattl_Desktop_Code_react_calculator_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","result","operation","isInCalc","isDotPresent","currentNum","handleClick","bind","C_Users_mattl_Desktop_Code_react_calculator_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","calcOperation","eval","join","setState","e","target","getAttribute","lastValue","slice","match","pop","concat","C_Users_mattl_Desktop_Code_react_calculator_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","isInOperation","_this2","buttons","map","button","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","data-value","className","key","onClick","Component","App","react_default","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b1a6164.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst calcButtons = [\r\n  {value: '7', id: 'seven'},\r\n  {value: '8', id: 'eight'},\r\n  {value: '9', id: 'nine'},\r\n  {value: '/', id: 'divide'},\r\n  {value: '4', id: 'four'},\r\n  {value: '5', id: 'five'},\r\n  {value: '6', id: 'six'},\r\n  {value: '*', id: 'multiply'},\r\n  {value: '1', id: 'one'},\r\n  {value: '2', id: 'two'},\r\n  {value: '3', id: 'three'},\r\n  {value: '-', id: 'subtract'},\r\n  {value: 'C', id: 'clear'},\r\n  {value: '0', id: 'zero'},\r\n  {value: '.', id: 'decimal'},\r\n  {value: '+', id: 'add'},\r\n  {value: '=', id: 'equals'}\r\n]\r\n\r\nclass Calculator extends Component {\r\n  \r\n  constructor(){\r\n      super();\r\n      this.state = {\r\n        result: 0,\r\n        operation: [],\r\n        isInCalc: false,\r\n        isDotPresent: false,\r\n        currentNum: ''\r\n      }\r\n\r\n      this.handleClick = this.handleClick.bind(this);\r\n      this.calcOperation = this.calcOperation.bind(this);\r\n\r\n  }\r\n\r\n  calcOperation() {\r\n    let operation = eval(this.state.operation.join('')) * 100 / 100;\r\n    this.setState({ \r\n      operation: [operation],\r\n      result: operation \r\n    })\r\n  }\r\n\r\n  handleClick(e) {\r\n      const value = e.target.getAttribute('data-value');\r\n      const lastValue = this.state.operation.slice(-1)[0];\r\n      const currentNum = this.state.currentNum;\r\n      const checkIfDecimal = /([1-9.])/g;\r\n      switch (value) {\r\n          case 'C': \r\n            this.setState({\r\n                operation: [],\r\n                result: 0,\r\n                isInCalc: false,\r\n                isDotPresent: false,\r\n                currentNum: ''\r\n            })\r\n            break\r\n          case '=':\r\n            this.calcOperation()\r\n            break\r\n          default:\r\n            if(value === '.') { this.setState({ isDotPresent: true }) }\r\n            if(this.state.operation === [] && value === '0') { break;}\r\n            if(currentNum !== '' && value === '0' && !currentNum.match(checkIfDecimal)) { break;}\r\n            if(value === '+' || value === '-' || value === '*' || value === '/') { \r\n              this.setState({ \r\n                isDotPresent: false,\r\n              }) \r\n            }\r\n            if( (value === '+' || value === '-' || value === '/' || value === '*') && (lastValue === '+' || lastValue === '-' || lastValue === '*' || lastValue === '/')) {\r\n              const operation = this.state.operation.pop();\r\n              this.setState({\r\n                operation: [...operation, value],\r\n                isInCalc: true,\r\n            })\r\n            }\r\n            if(value === '.' && this.state.isDotPresent) {break;}\r\n            this.setState({\r\n                operation: [...this.state.operation, value],\r\n                isInCalc: true,\r\n                isInOperation: false,\r\n                currentNum: value !== '+' && value !== '-' && value !== '*' && value !== '/' ? this.state.currentNum+=value : ''\r\n            })\r\n            break\r\n\r\n      }\r\n  } \r\n  render() {\r\n    const buttons = calcButtons.map((button) => \r\n      <button \r\n        data-value={button.value} \r\n        id={button.id} \r\n        className=\"btn--item\" \r\n        key={button.id}\r\n        onClick={this.handleClick}>\r\n          {button.value}\r\n      </button>\r\n    );\r\n    return (\r\n      <div className=\"calculator\">\r\n        <div className=\"display\" id=\"display\">{ !this.state.isInCalc ? this.state.result : this.state.operation }</div>\r\n        <div className=\"btn-container\">\r\n            <div className=\"btn--items\">\r\n              {buttons}\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Calculator from './Components/Calculator'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}